#!/bin/bash
#set -x

TOTAL_SAVED=0
CLEAN_DIRECTORIES=""
print_summary () {
  if [[ $TOTAL_SAVED -gt 0 ]]; then
      echo "Total space saved: $(numfmt --to=iec-i --suffix=B --padding=7 --from-unit=512 $TOTAL_SAVED)"
  fi
}
clean_folder () {
  if [ -d "$1" -a ! -h "$1" ]; then
    if [ -z "$2" ]
      then
        local SIZE=$(du -s $1|cut -f1)
      else
        local SIZE=$2
    fi

    if [[ $SIZE -gt 0 ]]; then
        CLEAN_DIRECTORIES="$CLEAN_DIRECTORIES\n$SIZE\t$1"
    fi
  fi
}

clean_folder "$HOME/.npm"
clean_folder "$HOME/.node-gyp"
clean_folder "$HOME/.yarn-cache"
if type "yarn" &>/dev/null; then
    clean_folder "$(yarn cache dir)"
fi
clean_folder "$TMPDIR/metro-cache"
clean_folder "$HOME/.vagrant.d/boxes"
clean_folder "$HOME/.vagrant.d/cache"
clean_folder "$HOME/.gradle/caches"
clean_folder "$HOME/.gradle/wrapper"
clean_folder "$HOME/.m2/repository"
clean_folder "$HOME/Library/Caches/pip"
clean_folder "$HOME/Library/Developer/Xcode/DerivedData/"
clean_folder "$HOME/Library/Developer/Xcode/Archives/"
clean_folder "$HOME/Library/Application\ Support/MobileSync/Backup/"
clean_folder "$HOME/Music/iTunes/iTunes\ Media/Mobile\ Applications/"
clean_folder "$HOME/Library/Application\ Support/Adobe/Common/Media\ Cache\ Files/"
clean_folder "$HOME/Library/Caches/CocoaPods"
clean_folder "$HOME/Library/Application\ Support/Code/Cache/"
clean_folder "$HOME/Library/Application\ Support/Code/CachedData/"
if [ "$PYENV_VIRTUALENV_CACHE_PATH" ]; then
    clean_folder "$PYENV_VIRTUALENV_CACHE_PATH"
fi
if type "brew" &>/dev/null; then
    clean_folder "$(brew --cache)"
#    brew tap --repair
fi
if type "gem" &> /dev/null; then
#    gem cleanup &>/dev/null
    clean_folder "$HOME/.gem"
fi
IFS=$'\n'
for i in $(find $HOME/Library/Caches -name IntelliJ* -type d -exec du -s {} \;); do
  DIR=$(echo $i|cut -f2)
  DIR_SIZE=$(echo $i|cut -f1)
  clean_folder "$DIR" "$DIR_SIZE"
done
echo "Please run this only in directory with your dev projects, currently in $(pwd)"
# todo try to parse gitignore
for i in $(find . -name node_modules -type d -exec du -s {} \;); do
  DIR=$(echo $i|cut -f2)
  DIR_SIZE=$(echo $i|cut -f1)
  #skip inner node_nodules
  if [[ ! $DIR =~ ^.*node_modules.*node_modules.*$ ]];
  then
      clean_folder "$DIR" "$DIR_SIZE"
  fi
done
for i in $(find . -name target -type d -exec du -s {} \;); do
  DIR=$(echo $i|cut -f2)
  DIR_SIZE=$(echo $i|cut -f1)
  #skip inner node_nodules
  clean_folder "$DIR" "$DIR_SIZE"
done
for i in $(find . -name build -type d -exec du -s {} \;); do
  DIR=$(echo $i|cut -f2)
  DIR_SIZE=$(echo $i|cut -f1)
  #skip inner node_nodules
  clean_folder "$DIR" "$DIR_SIZE"
done

for i in $(echo -e "$CLEAN_DIRECTORIES" | sort -nr); do
  DIR=$(echo $i|cut -f2)
  DIR_SIZE=$(echo $i|cut -f1)
  read -n1 -e -p "Delete directory \"$DIR\" with size $(numfmt --to=iec-i --suffix=B --padding=7 --from-unit=512 $DIR_SIZE) (Y/n/s)" CONFIRMATION
  CONFIRMATION=${CONFIRMATION:-Y}
  echo $CONFIRMATION
  if [[ $CONFIRMATION =~ ^[Yy]$ ]]
    then
      if type "trash" &> /dev/null; then
        trash -r $DIR
      else
        rm -r $DIR
      fi
      TOTAL_SAVED=$((TOTAL_SAVED+DIR_SIZE ))
    else
      if [[ $CONFIRMATION =~ ^[Ss]$ ]]
      then
        echo "Stopped"
        print_summary
        exit
      fi
  fi
done

#if type "docker" &> /dev/null; then
#    docker system prune -af
#fi

print_summary

if type "trash" &> /dev/null; then
  echo "Don't forget to empty Trash"
fi
